"""Service interfaces."""
from abc import ABC,abstractmethod
from typing import List,Dict,Any,Optional,Protocol,runtime_checkable
from .models.base import (
    Service,GameState,Scene,Object,
    UiState,LogEntry,Metrics
)

@runtime_checkable
class ServiceRegistry(Protocol):
    """Service registration and discovery."""
    async def register(self,svc:Service)->bool:...
    async def deregister(self,name:str)->bool:...
    async def get_service(self,name:str)->Optional[Service]:...
    async def list_services(self)->List[Service]:...
    async def health_check(self)->Dict[str,bool]:...

class GameStateManager(ABC):
    """Game state management interface."""
    @abstractmethod
    async def load_state(self,game_id:str)->GameState:...
    @abstractmethod 
    async def save_state(self,game_id:str,state:GameState)->bool:...
    @abstractmethod
    async def update_state(self,game_id:str,
                        updates:Dict[str,Any])->GameState:...
    @abstractmethod
    async def delete_state(self,game_id:str)->bool:...

class WorldGenerator(ABC):
    """World generation interface."""
    @abstractmethod
    async def generate_world(self,prompt:str,
                         constraints:Dict[str,Any])->List[Scene]:...
    @abstractmethod
    async def extend_world(self,scenes:List[Scene],
                        prompt:str)->List[Scene]:...
    @abstractmethod
    async def modify_scene(self,scene:Scene,
                        changes:Dict[str,Any])->Scene:...

class UIManager(ABC):
    """UI state management interface."""
    @abstractmethod
    async def get_state(self)->UiState:...
    @abstractmethod
    async def update_state(self,updates:Dict[str,Any])->UiState:...
    @abstractmethod
    async def add_message(self,msg:str)->None:...
    @abstractmethod
    async def clear_messages(self)->None:...
    @abstractmethod
    async def render_scene(self,scene:Scene)->str:...

class InputProcessor(ABC):
    """Natural language input processing."""
    @abstractmethod
    async def process_command(self,cmd:str,
                          context:GameState)->Dict[str,Any]:...
    @abstractmethod
    async def get_suggestions(self,partial_cmd:str,
                          context:GameState)->List[str]:...
    @abstractmethod
    async def validate_command(self,cmd:str,
                           context:GameState)->bool:...

class EventLogger(ABC):
    """Logging interface."""
    @abstractmethod
    async def log(self,entry:LogEntry)->None:...
    @abstractmethod
    async def get_logs(self,filters:Dict[str,Any])->List[LogEntry]:...
    @abstractmethod
    async def clear_logs(self,older_than:str)->None:...

class MetricsCollector(ABC):
    """Metrics collection interface."""
    @abstractmethod
    async def record_metric(self,name:str,value:float)->None:...
    @abstractmethod
    async def get_metrics(self)->Metrics:...
    @abstractmethod
    async def clear_metrics(self)->None:...

class AuthManager(ABC):
    """Authentication/authorization interface."""
    @abstractmethod
    async def authenticate(self,creds:Dict[str,str])->str:...
    @abstractmethod
    async def validate_token(self,token:str)->bool:...
    @abstractmethod
    async def get_permissions(self,token:str)->List[str]:...
    @abstractmethod
    async def revoke_token(self,token:str)->None:...